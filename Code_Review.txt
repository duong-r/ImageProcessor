CODE REVIEW

GENERAL DESIGN
Overall, this design was very cohesive and fairly easy to work with and build upon. All interfaces
served a designated purpose and there were no unnecessary complications or bloated code added
without logical reasoning. We were able to figure out the functionality of the program fairly
quickly and had no issues understanding the purpose of any interfaces/methods/classes. We found this
code to be very convenient to use and appreciate the simplicity and cohesiveness of the design. The
code was fully functional, and we did not need to request any changes to be made.

CODE STRENGTHS AND LIMITATIONS
The greatest strength that we observed with this code was its simplicity, readability, and
ease to build upon. We found the implementation of the mosaic to be fairly easy to implement
with this design, especially in terms of the view and controller where the edits to the
classes were almost trivial for adding a new feature. With that said, we thought that the code
could use some improvement with the flexibility of the model, as none of the existing model or
image methods could have been reused for a new feature. While each method served a
clear purpose and all methods were fully functional, we felt that many methods could have been
simplified and abstracted using switch, as much of the code was nearly identical in many methods. We
would suggest to group by a specific functionality (filtering, transforming) and creating a
generalized method for this and using switch statements to differentiate and mutate the variables.
We also found the implementation of the filtering methods to be a bit confusing and definitely saw
some opportunities to simplify this implementation for better cohesiveness and flexibility.
Aside from these points, however, we found the model design to be very good and easy to build upon.

DOCUMENTATION AND COHESIVENESS
In terms of documentation, we did not run into any problems with java docs or comments at any point
in our use and analysis of this code. All java docs were well written and adequately explained
the purpose of the methods, classes, and interfaces that they were describing. As we have emphasized
in previous sections, we found the cohesiveness and readability of this code to be its strongest
point and again give major props for this.




